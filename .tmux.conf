############################################################################
# Reset Prefix
############################################################################
set -g prefix C-a
bind-key a send-prefix # for nested tmux sessions

############################################################################
# Global options
############################################################################
# large history
set-option -g history-limit 10000

# colors
setw -g mode-style bg=black
set-option -g default-terminal "screen-256color"
set-option -g pane-active-border-style fg=green
setw -g mode-style bg=red,fg=white

# utf8 support
#set-window-option -g utf8 on

# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
set-window-option -g window-status-current-style reverse

# Automatically set window title
setw -g automatic-rename
setw -g allow-rename off

# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
#setw -g mode-mouse on
#setw -g mouse-resize-pane on
#set -g mouse-select-window on
#set -g mouse-select-pane on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# tmux 2.1 mouse settings
set -g mouse on
bind-key -T copy-mode WheelUpPane send -X scroll-up
bind-key -T copy-mode WheelDownPane send -X scroll-down
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
#3.0
#bind -n C-WheelUpPane select-pane -t= '\'; copy-mode -e '\'; send-keys -M
bind -T copy-mode C-WheelUpPane send -X halfpage-up
bind -T copy-mode C-WheelDownPane send -X halfpage-down

# vi movement keys
# set-option -g status-keys vi

############################################################################
# Status Bar
############################################################################
#set-option -g status-utf8 on
set-option -g status-justify right
set-option -g status-bg black # colour213 # pink
set-option -g status-fg cyan
#set-option -g status-interval 5
set-option -g status-left-length 60
set-option -g status-left '#[fg=blue,bold]#T#[default]'
#set-option -g status-left '#[fg=blue,bold]#T#[default] #{cpu_icon}#{cpu_percentage}' #(tmux-cpu --format "#[fg=:color]:percent [:spark]#[default]")'
set-option -g status-right ''
set-option -g visual-activity on

# Titles (window number, program name, active (or not)
#set-option -g set-titles on
#set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
#unbind [ # copy mode bound to escape key
unbind j
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
bind-key r source-file ~/.tmux.conf

#bind Escape copy-mode

# new split in current pane (horizontal / vertical)
bind-key - split-window -v -c "#{pane_current_path}" # split pane horizontally
if-shell "[[ `tmux -V` == *1.8 ]]" 'unbind - ; bind - split-window -v'
bind-key '\' split-window -h -c "#{pane_current_path}" # split pane vertically
if-shell "[[ `tmux -V` == *1.8 ]]" 'unbind \ ; bind \ split-window -h'
#bind-key - split-window -v # split pane horizontally
#bind-key \ split-window -h # split pane vertically

bind-key c new-window -c "#{pane_current_path}"
if-shell "[[ `tmux -V` == *1.8 ]]" 'unbind c; bind c new-window'
#bind-key c new-window

# list panes
bind-key Space list-panes

# break-pane
bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous pane
#bind-key -n C-up prev
#bind-key -n C-left prev

#next pane
#bind-key -n C-right next
#bind-key -n C-down next

############################################################################
# windows
############################################################################
#set-window-option -g window-status-current-style bg=red
bind C-j previous-window
bind C-k next-window
bind-key C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session,
# even if both clients are looking at different windows.
# It seems that in this particular case, Screen has the better default
# where a window is only constrained in size if a smaller client
# is actively looking at it.
#setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
bind-key h select-pane -L\; refresh-client -S
bind-key j select-pane -D\; refresh-client -S
bind-key k select-pane -U\; refresh-client -S
bind-key l select-pane -R\; refresh-client -S

# Resizing ---------------------------------------------------------------
bind-key -n S-Left resize-pane -L 2
bind-key -n S-Down resize-pane -D 2
bind-key -n S-Up resize-pane -U 2
bind-key -n S-Right resize-pane -R 2

# use vim motion keys while in copy mode
setw -g mode-keys vi

############################################################################
# layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window


# focus on first window
# select-window -t 0

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
#bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# clear screen via tmux prefix + ctrl-L
bind C-l send-keys -R \; clear-history\; send-keys C-l

set-option -g renumber-windows on

bind-key Left swap-window -d -t -1
bind-key Right swap-window -d -t +1

bind-key -T copy-mode-vi v send-keys -X begin-selection
#bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe "pbcopy"
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'christoomey/vim-tmux-navigator'


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
